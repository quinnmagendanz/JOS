Quinn Magendanz

1) mystery_t is a uintptr_t because it has been assigned through x, and we know x is a virtual address since it could be validly dereferenced in c code.

2)
Entry	VA		Points to...
1023	0xFFC00000	Page table for top 4MB of physical memory
1022	0xFF800000	Page table for top [8MB - 4MB) of physical memory
.	.		.
.	.		.
.	.		.
2	0x00800000	Page table for bottom [8MB - 12MB) of physical memory
1	0x00400000	Page table for bottom [4MB - 8MB) of physical memory
0	0x00000000	Page table for bottom 4MB of physical memory

3) The permission bits associated with each page table entry will not allow the user to R/W priviledges beyond what is explicitly allowed.

4) Each page is 4096 bytes large. This means the kern_pgdir can support 1024 sub-tables which each address 1024 pages of physical memory. So 1024 tables * 1024 pages * 4096 bytes = 4 GB of virtual memory. 

5) The overhead of memory management is minimal. (1 kern_pgdir + 1024 page tables) * 4096 bytes =~ 4MB.

6) We must continue to operate at a low address while we set up the page management system. We must use a few functions such as boot_alloc to bootstrap up the virtual memory system. Once it is set up, we jump to a higher address.


Challenge: 

